# Builder
FROM golang:1.25-alpine AS agent-builder
ARG BUILD_TAGS="exclude_frontend"
ARG COMPOSE_VERSION=2.39.2
ARG TARGETARCH
WORKDIR /build
RUN apk add --no-cache git ca-certificates tzdata curl file
COPY ./backend/go.mod ./backend/go.sum ./
RUN go mod download
COPY ./backend ./backend

# Build agent (pure static)
WORKDIR /build/backend
RUN CGO_ENABLED=0 GOOS=linux go build -tags "${BUILD_TAGS}" -ldflags='-w -s' -trimpath -o /out/arcane-agent ./cmd/main.go

# Fetch docker-compose
COPY scripts/development/download-compose.sh /tmp/download-compose.sh
RUN set -eux; chmod +x /tmp/download-compose.sh; /tmp/download-compose.sh "${COMPOSE_VERSION}" "/out/docker-compose" "${TARGETARCH}"

# Verify compose is static (best-effort)
RUN set -eux; file /out/docker-compose || true; ldd /out/docker-compose || true

# Export CA bundle for TLS
RUN cp /etc/ssl/certs/ca-certificates.crt /out/ca-certificates.crt

# Final: distroless static (no shell, no glibc)
FROM gcr.io/distroless/static:nonroot AS agent
WORKDIR /app
ENV PATH=/usr/local/bin \
    GIN_MODE=release \
    PORT=3553 \
    AGENT_MODE=true \
    ENVIRONMENT=production \
    SSL_CERT_FILE=/etc/ssl/certs/ca-certificates.crt

# Binaries and CA bundle
COPY --from=agent-builder /out/arcane-agent /usr/local/bin/arcane-agent
COPY --from=agent-builder /out/docker-compose /usr/local/bin/docker-compose
COPY --from=agent-builder /out/ca-certificates.crt /etc/ssl/certs/ca-certificates.crt

VOLUME ["/app/data"]
EXPOSE 3553
CMD ["/usr/local/bin/arcane-agent"]