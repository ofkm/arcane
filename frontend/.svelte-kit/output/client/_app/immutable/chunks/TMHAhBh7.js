import{B as o}from"./CThrnvRT.js";class i extends o{async deploy(s){return(await this.api.post(`/stacks/${s}/deploy`)).data}async down(s){return(await this.api.post(`/stacks/${s}/down`)).data}async restart(s){return(await this.api.post(`/stacks/${s}/restart`)).data}async destroy(s,t=!1,a=!1){console.log("API service - removeVolumes:",t,"removeFiles:",a);const e={removeVolumes:t?"true":"false",removeFiles:a?"true":"false"};return console.log("Query params:",e),(await this.api.delete(`/stacks/${s}/destroy`,{params:e})).data}async redeploy(s){return(await this.api.post(`/stacks/${s}/redeploy`)).data}async pull(s){return(await this.api.post(`/stacks/${s}/pull`)).data}async import(s,t){return(await this.api.post("/stacks/import",{stackId:s,stackName:t||void 0})).data}async save(s,t,a,e){return(await this.api.put(`/stacks/${s}`,{name:t,composeContent:a,envContent:e})).data}async create(s,t,a){return(await this.api.post("/stacks/create",{name:s,composeContent:t,envContent:a||""})).data}async migrate(s){return(await this.api.post(`/stacks/${s}/migrate`)).data}async list(){return(await this.api.get("")).data}async validate(s){return(await this.api.get(`/stacks/${s}/validate`)).data}async convertDockerRun(s){return(await this.api.post("/convert",{dockerRunCommand:s})).data}}export{i as S};
