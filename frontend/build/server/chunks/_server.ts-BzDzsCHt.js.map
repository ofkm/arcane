{"version":3,"file":"_server.ts-BzDzsCHt.js","sources":["../../../.svelte-kit/adapter-node/entries/endpoints/api/stacks/_stackId_/logs/_server.ts.js"],"sourcesContent":["import { e as error } from \"../../../../../../chunks/index.js\";\nimport { g as getDockerClient } from \"../../../../../../chunks/core.js\";\nimport { Writable } from \"stream\";\nconst GET = async ({ params, request, url }) => {\n  const { stackId } = params;\n  if (!stackId) {\n    throw error(400, \"Stack ID is required\");\n  }\n  const tail = parseInt(url.searchParams.get(\"tail\") || \"50\");\n  const timestamps = url.searchParams.get(\"timestamps\") !== \"false\";\n  const follow = url.searchParams.get(\"follow\") !== \"false\";\n  console.log(`Starting stack logs for ${stackId}, follow=${follow}, tail=${tail}`);\n  try {\n    const docker = await getDockerClient();\n    const containers = await docker.listContainers({\n      all: true,\n      filters: {\n        label: [`com.docker.compose.project=${stackId}`]\n      }\n    });\n    console.log(`Found ${containers.length} containers for stack ${stackId}`);\n    if (containers.length === 0) {\n      throw error(404, `No containers found for stack: ${stackId}`);\n    }\n    const stream = new ReadableStream({\n      start(controller) {\n        const encoder = new TextEncoder();\n        let isClosed = false;\n        const activeStreams = /* @__PURE__ */ new Map();\n        const containerNames = /* @__PURE__ */ new Map();\n        containers.forEach((containerInfo) => {\n          const serviceName = containerInfo.Labels[\"com.docker.compose.service\"] || containerInfo.Names[0]?.replace(/^\\//, \"\") || containerInfo.Id.substring(0, 12);\n          containerNames.set(containerInfo.Id, serviceName);\n          console.log(`Container ${containerInfo.Id.substring(0, 12)} -> Service: ${serviceName}`);\n        });\n        const safeEnqueue = (data) => {\n          if (!isClosed) {\n            try {\n              controller.enqueue(encoder.encode(data));\n            } catch (err) {\n              console.error(\"Error enqueuing data:\", err);\n              isClosed = true;\n              cleanup();\n            }\n          }\n        };\n        const createLogProcessor = (containerId, serviceName) => {\n          const stdoutStream = new Writable({\n            write(chunk, encoding, callback) {\n              if (isClosed) {\n                callback();\n                return;\n              }\n              try {\n                const message = chunk.toString().trim();\n                if (message) {\n                  const data = JSON.stringify({\n                    level: \"stdout\",\n                    message,\n                    timestamp: (/* @__PURE__ */ new Date()).toISOString(),\n                    service: serviceName,\n                    containerId: containerId.substring(0, 12)\n                  });\n                  safeEnqueue(`data: ${data}\n\n`);\n                }\n                callback();\n              } catch (err) {\n                console.error(`Error processing stdout for ${serviceName}:`, err);\n                callback();\n              }\n            }\n          });\n          const stderrStream = new Writable({\n            write(chunk, encoding, callback) {\n              if (isClosed) {\n                callback();\n                return;\n              }\n              try {\n                const message = chunk.toString().trim();\n                if (message) {\n                  const data = JSON.stringify({\n                    level: \"stderr\",\n                    message,\n                    timestamp: (/* @__PURE__ */ new Date()).toISOString(),\n                    service: serviceName,\n                    containerId: containerId.substring(0, 12)\n                  });\n                  safeEnqueue(`data: ${data}\n\n`);\n                }\n                callback();\n              } catch (err) {\n                console.error(`Error processing stderr for ${serviceName}:`, err);\n                callback();\n              }\n            }\n          });\n          return { stdoutStream, stderrStream };\n        };\n        const cleanup = () => {\n          if (isClosed) return;\n          console.log(`Cleaning up stack logs for ${stackId}`);\n          isClosed = true;\n          activeStreams.forEach((stream2, containerId) => {\n            try {\n              if (typeof stream2.destroy === \"function\") {\n                stream2.destroy();\n              }\n            } catch (err) {\n              console.error(`Error cleaning up stream for container ${containerId}:`, err);\n            }\n          });\n          activeStreams.clear();\n        };\n        const initialData = JSON.stringify({\n          level: \"info\",\n          message: `Starting logs for stack ${stackId} (${containers.length} containers)`,\n          timestamp: (/* @__PURE__ */ new Date()).toISOString(),\n          service: \"system\",\n          containerId: \"N/A\"\n        });\n        safeEnqueue(`data: ${initialData}\n\n`);\n        const streamPromises = containers.map(async (containerInfo) => {\n          console.log(\"Container id: \", containerInfo.Id, \"Service name:\", containerNames.get(containerInfo.Id));\n          const container = docker.getContainer(containerInfo.Id);\n          const serviceName = containerNames.get(containerInfo.Id);\n          try {\n            const containerInspect = await container.inspect();\n            console.log(`Container ${serviceName} state: ${containerInspect.State.Status}`);\n            return new Promise((resolve) => {\n              container.logs(\n                {\n                  follow,\n                  stdout: true,\n                  stderr: true,\n                  timestamps,\n                  tail: Math.min(tail, 100)\n                },\n                (err, logStream) => {\n                  if (err) {\n                    console.error(`Failed to get logs for ${serviceName}:`, err);\n                    const errorData = JSON.stringify({\n                      level: \"error\",\n                      message: `Failed to get logs: ${err.message}`,\n                      timestamp: (/* @__PURE__ */ new Date()).toISOString(),\n                      service: serviceName,\n                      containerId: containerInfo.Id.substring(0, 12)\n                    });\n                    safeEnqueue(`data: ${errorData}\n\n`);\n                    resolve();\n                    return;\n                  }\n                  if (!logStream || isClosed) {\n                    resolve();\n                    return;\n                  }\n                  activeStreams.set(containerInfo.Id, logStream);\n                  const { stdoutStream, stderrStream } = createLogProcessor(containerInfo.Id, serviceName);\n                  try {\n                    container.modem.demuxStream(logStream, stdoutStream, stderrStream);\n                    logStream.on(\"end\", () => {\n                      console.log(`Log stream ended for ${serviceName}`);\n                      activeStreams.delete(containerInfo.Id);\n                      resolve();\n                    });\n                    logStream.on(\"error\", (streamErr) => {\n                      console.error(`Log stream error for ${serviceName}:`, streamErr);\n                      activeStreams.delete(containerInfo.Id);\n                      resolve();\n                    });\n                    logStream.on(\"close\", () => {\n                      console.log(`Log stream closed for ${serviceName}`);\n                      activeStreams.delete(containerInfo.Id);\n                    });\n                    const connectionData = JSON.stringify({\n                      level: \"info\",\n                      message: `Connected to ${serviceName} logs`,\n                      timestamp: (/* @__PURE__ */ new Date()).toISOString(),\n                      service: serviceName,\n                      containerId: containerInfo.Id.substring(0, 12)\n                    });\n                    safeEnqueue(`data: ${connectionData}\n\n`);\n                  } catch (demuxError) {\n                    console.error(`Error setting up demux for ${serviceName}:`, demuxError);\n                    resolve();\n                  }\n                }\n              );\n            });\n          } catch (inspectError) {\n            console.error(`Container ${serviceName} not accessible:`, inspectError);\n            const errorMessage = inspectError instanceof Error ? inspectError.message : String(inspectError);\n            const errorData = JSON.stringify({\n              level: \"error\",\n              message: `Container ${serviceName} is not accessible: ${errorMessage}`,\n              timestamp: (/* @__PURE__ */ new Date()).toISOString(),\n              service: serviceName,\n              containerId: containerInfo.Id.substring(0, 12)\n            });\n            safeEnqueue(`data: ${errorData}\n\n`);\n            return Promise.resolve();\n          }\n        });\n        Promise.allSettled(streamPromises).then((results) => {\n          console.log(`Stream setup complete for ${stackId}. Active streams: ${activeStreams.size}`);\n          results.forEach((result, index) => {\n            if (result.status === \"rejected\") {\n              console.error(`Stream setup failed for container ${index}:`, result.reason);\n            }\n          });\n          if (!isClosed && activeStreams.size === 0) {\n            const finalData = JSON.stringify({\n              level: \"warning\",\n              message: \"No active log streams available - containers may be stopped\",\n              timestamp: (/* @__PURE__ */ new Date()).toISOString(),\n              service: \"system\",\n              containerId: \"N/A\"\n            });\n            safeEnqueue(`data: ${finalData}\n\n`);\n          }\n        }).catch((setupError) => {\n          console.error(\"Error setting up log streams:\", setupError);\n          if (!isClosed) {\n            const errorData = JSON.stringify({\n              level: \"error\",\n              message: `Failed to setup log streams: ${setupError.message}`,\n              timestamp: (/* @__PURE__ */ new Date()).toISOString(),\n              service: \"system\",\n              containerId: \"N/A\"\n            });\n            safeEnqueue(`data: ${errorData}\n\n`);\n          }\n        });\n        request.signal.addEventListener(\"abort\", cleanup);\n        return cleanup;\n      },\n      cancel() {\n        console.log(`Client disconnected from stack ${stackId} logs`);\n      }\n    });\n    return new Response(stream, {\n      headers: {\n        \"Content-Type\": \"text/event-stream\",\n        \"Cache-Control\": \"no-cache\",\n        Connection: \"keep-alive\",\n        \"Access-Control-Allow-Origin\": \"*\",\n        \"Access-Control-Allow-Headers\": \"Cache-Control\"\n      }\n    });\n  } catch (err) {\n    console.error(`Error streaming logs for stack ${stackId}:`, err);\n    throw error(500, `Failed to stream stack logs: ${err.message}`);\n  }\n};\nexport {\n  GET\n};\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAGK,MAAC,GAAG,GAAG,OAAO,EAAE,MAAM,EAAE,OAAO,EAAE,GAAG,EAAE,KAAK;AAChD,EAAE,MAAM,EAAE,OAAO,EAAE,GAAG,MAAM;AAC5B,EAAE,IAAI,CAAC,OAAO,EAAE;AAChB,IAAI,MAAM,KAAK,CAAC,GAAG,EAAE,sBAAsB,CAAC;AAC5C;AACA,EAAE,MAAM,IAAI,GAAG,QAAQ,CAAC,GAAG,CAAC,YAAY,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,IAAI,CAAC;AAC7D,EAAE,MAAM,UAAU,GAAG,GAAG,CAAC,YAAY,CAAC,GAAG,CAAC,YAAY,CAAC,KAAK,OAAO;AACnE,EAAE,MAAM,MAAM,GAAG,GAAG,CAAC,YAAY,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,OAAO;AAC3D,EAAE,OAAO,CAAC,GAAG,CAAC,CAAC,wBAAwB,EAAE,OAAO,CAAC,SAAS,EAAE,MAAM,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC;AACnF,EAAE,IAAI;AACN,IAAI,MAAM,MAAM,GAAG,MAAM,eAAe,EAAE;AAC1C,IAAI,MAAM,UAAU,GAAG,MAAM,MAAM,CAAC,cAAc,CAAC;AACnD,MAAM,GAAG,EAAE,IAAI;AACf,MAAM,OAAO,EAAE;AACf,QAAQ,KAAK,EAAE,CAAC,CAAC,2BAA2B,EAAE,OAAO,CAAC,CAAC;AACvD;AACA,KAAK,CAAC;AACN,IAAI,OAAO,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,UAAU,CAAC,MAAM,CAAC,sBAAsB,EAAE,OAAO,CAAC,CAAC,CAAC;AAC7E,IAAI,IAAI,UAAU,CAAC,MAAM,KAAK,CAAC,EAAE;AACjC,MAAM,MAAM,KAAK,CAAC,GAAG,EAAE,CAAC,+BAA+B,EAAE,OAAO,CAAC,CAAC,CAAC;AACnE;AACA,IAAI,MAAM,MAAM,GAAG,IAAI,cAAc,CAAC;AACtC,MAAM,KAAK,CAAC,UAAU,EAAE;AACxB,QAAQ,MAAM,OAAO,GAAG,IAAI,WAAW,EAAE;AACzC,QAAQ,IAAI,QAAQ,GAAG,KAAK;AAC5B,QAAQ,MAAM,aAAa,mBAAmB,IAAI,GAAG,EAAE;AACvD,QAAQ,MAAM,cAAc,mBAAmB,IAAI,GAAG,EAAE;AACxD,QAAQ,UAAU,CAAC,OAAO,CAAC,CAAC,aAAa,KAAK;AAC9C,UAAU,MAAM,WAAW,GAAG,aAAa,CAAC,MAAM,CAAC,4BAA4B,CAAC,IAAI,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,IAAI,aAAa,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC;AACnK,UAAU,cAAc,CAAC,GAAG,CAAC,aAAa,CAAC,EAAE,EAAE,WAAW,CAAC;AAC3D,UAAU,OAAO,CAAC,GAAG,CAAC,CAAC,UAAU,EAAE,aAAa,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,aAAa,EAAE,WAAW,CAAC,CAAC,CAAC;AAClG,SAAS,CAAC;AACV,QAAQ,MAAM,WAAW,GAAG,CAAC,IAAI,KAAK;AACtC,UAAU,IAAI,CAAC,QAAQ,EAAE;AACzB,YAAY,IAAI;AAChB,cAAc,UAAU,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AACtD,aAAa,CAAC,OAAO,GAAG,EAAE;AAC1B,cAAc,OAAO,CAAC,KAAK,CAAC,uBAAuB,EAAE,GAAG,CAAC;AACzD,cAAc,QAAQ,GAAG,IAAI;AAC7B,cAAc,OAAO,EAAE;AACvB;AACA;AACA,SAAS;AACT,QAAQ,MAAM,kBAAkB,GAAG,CAAC,WAAW,EAAE,WAAW,KAAK;AACjE,UAAU,MAAM,YAAY,GAAG,IAAI,QAAQ,CAAC;AAC5C,YAAY,KAAK,CAAC,KAAK,EAAE,QAAQ,EAAE,QAAQ,EAAE;AAC7C,cAAc,IAAI,QAAQ,EAAE;AAC5B,gBAAgB,QAAQ,EAAE;AAC1B,gBAAgB;AAChB;AACA,cAAc,IAAI;AAClB,gBAAgB,MAAM,OAAO,GAAG,KAAK,CAAC,QAAQ,EAAE,CAAC,IAAI,EAAE;AACvD,gBAAgB,IAAI,OAAO,EAAE;AAC7B,kBAAkB,MAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC;AAC9C,oBAAoB,KAAK,EAAE,QAAQ;AACnC,oBAAoB,OAAO;AAC3B,oBAAoB,SAAS,EAAE,iBAAiB,IAAI,IAAI,EAAE,EAAE,WAAW,EAAE;AACzE,oBAAoB,OAAO,EAAE,WAAW;AACxC,oBAAoB,WAAW,EAAE,WAAW,CAAC,SAAS,CAAC,CAAC,EAAE,EAAE;AAC5D,mBAAmB,CAAC;AACpB,kBAAkB,WAAW,CAAC,CAAC,MAAM,EAAE,IAAI;;AAE3C,CAAC,CAAC;AACF;AACA,gBAAgB,QAAQ,EAAE;AAC1B,eAAe,CAAC,OAAO,GAAG,EAAE;AAC5B,gBAAgB,OAAO,CAAC,KAAK,CAAC,CAAC,4BAA4B,EAAE,WAAW,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC;AACjF,gBAAgB,QAAQ,EAAE;AAC1B;AACA;AACA,WAAW,CAAC;AACZ,UAAU,MAAM,YAAY,GAAG,IAAI,QAAQ,CAAC;AAC5C,YAAY,KAAK,CAAC,KAAK,EAAE,QAAQ,EAAE,QAAQ,EAAE;AAC7C,cAAc,IAAI,QAAQ,EAAE;AAC5B,gBAAgB,QAAQ,EAAE;AAC1B,gBAAgB;AAChB;AACA,cAAc,IAAI;AAClB,gBAAgB,MAAM,OAAO,GAAG,KAAK,CAAC,QAAQ,EAAE,CAAC,IAAI,EAAE;AACvD,gBAAgB,IAAI,OAAO,EAAE;AAC7B,kBAAkB,MAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC;AAC9C,oBAAoB,KAAK,EAAE,QAAQ;AACnC,oBAAoB,OAAO;AAC3B,oBAAoB,SAAS,EAAE,iBAAiB,IAAI,IAAI,EAAE,EAAE,WAAW,EAAE;AACzE,oBAAoB,OAAO,EAAE,WAAW;AACxC,oBAAoB,WAAW,EAAE,WAAW,CAAC,SAAS,CAAC,CAAC,EAAE,EAAE;AAC5D,mBAAmB,CAAC;AACpB,kBAAkB,WAAW,CAAC,CAAC,MAAM,EAAE,IAAI;;AAE3C,CAAC,CAAC;AACF;AACA,gBAAgB,QAAQ,EAAE;AAC1B,eAAe,CAAC,OAAO,GAAG,EAAE;AAC5B,gBAAgB,OAAO,CAAC,KAAK,CAAC,CAAC,4BAA4B,EAAE,WAAW,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC;AACjF,gBAAgB,QAAQ,EAAE;AAC1B;AACA;AACA,WAAW,CAAC;AACZ,UAAU,OAAO,EAAE,YAAY,EAAE,YAAY,EAAE;AAC/C,SAAS;AACT,QAAQ,MAAM,OAAO,GAAG,MAAM;AAC9B,UAAU,IAAI,QAAQ,EAAE;AACxB,UAAU,OAAO,CAAC,GAAG,CAAC,CAAC,2BAA2B,EAAE,OAAO,CAAC,CAAC,CAAC;AAC9D,UAAU,QAAQ,GAAG,IAAI;AACzB,UAAU,aAAa,CAAC,OAAO,CAAC,CAAC,OAAO,EAAE,WAAW,KAAK;AAC1D,YAAY,IAAI;AAChB,cAAc,IAAI,OAAO,OAAO,CAAC,OAAO,KAAK,UAAU,EAAE;AACzD,gBAAgB,OAAO,CAAC,OAAO,EAAE;AACjC;AACA,aAAa,CAAC,OAAO,GAAG,EAAE;AAC1B,cAAc,OAAO,CAAC,KAAK,CAAC,CAAC,uCAAuC,EAAE,WAAW,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC;AAC1F;AACA,WAAW,CAAC;AACZ,UAAU,aAAa,CAAC,KAAK,EAAE;AAC/B,SAAS;AACT,QAAQ,MAAM,WAAW,GAAG,IAAI,CAAC,SAAS,CAAC;AAC3C,UAAU,KAAK,EAAE,MAAM;AACvB,UAAU,OAAO,EAAE,CAAC,wBAAwB,EAAE,OAAO,CAAC,EAAE,EAAE,UAAU,CAAC,MAAM,CAAC,YAAY,CAAC;AACzF,UAAU,SAAS,EAAE,iBAAiB,IAAI,IAAI,EAAE,EAAE,WAAW,EAAE;AAC/D,UAAU,OAAO,EAAE,QAAQ;AAC3B,UAAU,WAAW,EAAE;AACvB,SAAS,CAAC;AACV,QAAQ,WAAW,CAAC,CAAC,MAAM,EAAE,WAAW;;AAExC,CAAC,CAAC;AACF,QAAQ,MAAM,cAAc,GAAG,UAAU,CAAC,GAAG,CAAC,OAAO,aAAa,KAAK;AACvE,UAAU,OAAO,CAAC,GAAG,CAAC,gBAAgB,EAAE,aAAa,CAAC,EAAE,EAAE,eAAe,EAAE,cAAc,CAAC,GAAG,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC;AAChH,UAAU,MAAM,SAAS,GAAG,MAAM,CAAC,YAAY,CAAC,aAAa,CAAC,EAAE,CAAC;AACjE,UAAU,MAAM,WAAW,GAAG,cAAc,CAAC,GAAG,CAAC,aAAa,CAAC,EAAE,CAAC;AAClE,UAAU,IAAI;AACd,YAAY,MAAM,gBAAgB,GAAG,MAAM,SAAS,CAAC,OAAO,EAAE;AAC9D,YAAY,OAAO,CAAC,GAAG,CAAC,CAAC,UAAU,EAAE,WAAW,CAAC,QAAQ,EAAE,gBAAgB,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;AAC3F,YAAY,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,KAAK;AAC5C,cAAc,SAAS,CAAC,IAAI;AAC5B,gBAAgB;AAChB,kBAAkB,MAAM;AACxB,kBAAkB,MAAM,EAAE,IAAI;AAC9B,kBAAkB,MAAM,EAAE,IAAI;AAC9B,kBAAkB,UAAU;AAC5B,kBAAkB,IAAI,EAAE,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,GAAG;AAC1C,iBAAiB;AACjB,gBAAgB,CAAC,GAAG,EAAE,SAAS,KAAK;AACpC,kBAAkB,IAAI,GAAG,EAAE;AAC3B,oBAAoB,OAAO,CAAC,KAAK,CAAC,CAAC,uBAAuB,EAAE,WAAW,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC;AAChF,oBAAoB,MAAM,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;AACrD,sBAAsB,KAAK,EAAE,OAAO;AACpC,sBAAsB,OAAO,EAAE,CAAC,oBAAoB,EAAE,GAAG,CAAC,OAAO,CAAC,CAAC;AACnE,sBAAsB,SAAS,EAAE,iBAAiB,IAAI,IAAI,EAAE,EAAE,WAAW,EAAE;AAC3E,sBAAsB,OAAO,EAAE,WAAW;AAC1C,sBAAsB,WAAW,EAAE,aAAa,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC,EAAE,EAAE;AACnE,qBAAqB,CAAC;AACtB,oBAAoB,WAAW,CAAC,CAAC,MAAM,EAAE,SAAS;;AAElD,CAAC,CAAC;AACF,oBAAoB,OAAO,EAAE;AAC7B,oBAAoB;AACpB;AACA,kBAAkB,IAAI,CAAC,SAAS,IAAI,QAAQ,EAAE;AAC9C,oBAAoB,OAAO,EAAE;AAC7B,oBAAoB;AACpB;AACA,kBAAkB,aAAa,CAAC,GAAG,CAAC,aAAa,CAAC,EAAE,EAAE,SAAS,CAAC;AAChE,kBAAkB,MAAM,EAAE,YAAY,EAAE,YAAY,EAAE,GAAG,kBAAkB,CAAC,aAAa,CAAC,EAAE,EAAE,WAAW,CAAC;AAC1G,kBAAkB,IAAI;AACtB,oBAAoB,SAAS,CAAC,KAAK,CAAC,WAAW,CAAC,SAAS,EAAE,YAAY,EAAE,YAAY,CAAC;AACtF,oBAAoB,SAAS,CAAC,EAAE,CAAC,KAAK,EAAE,MAAM;AAC9C,sBAAsB,OAAO,CAAC,GAAG,CAAC,CAAC,qBAAqB,EAAE,WAAW,CAAC,CAAC,CAAC;AACxE,sBAAsB,aAAa,CAAC,MAAM,CAAC,aAAa,CAAC,EAAE,CAAC;AAC5D,sBAAsB,OAAO,EAAE;AAC/B,qBAAqB,CAAC;AACtB,oBAAoB,SAAS,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC,SAAS,KAAK;AACzD,sBAAsB,OAAO,CAAC,KAAK,CAAC,CAAC,qBAAqB,EAAE,WAAW,CAAC,CAAC,CAAC,EAAE,SAAS,CAAC;AACtF,sBAAsB,aAAa,CAAC,MAAM,CAAC,aAAa,CAAC,EAAE,CAAC;AAC5D,sBAAsB,OAAO,EAAE;AAC/B,qBAAqB,CAAC;AACtB,oBAAoB,SAAS,CAAC,EAAE,CAAC,OAAO,EAAE,MAAM;AAChD,sBAAsB,OAAO,CAAC,GAAG,CAAC,CAAC,sBAAsB,EAAE,WAAW,CAAC,CAAC,CAAC;AACzE,sBAAsB,aAAa,CAAC,MAAM,CAAC,aAAa,CAAC,EAAE,CAAC;AAC5D,qBAAqB,CAAC;AACtB,oBAAoB,MAAM,cAAc,GAAG,IAAI,CAAC,SAAS,CAAC;AAC1D,sBAAsB,KAAK,EAAE,MAAM;AACnC,sBAAsB,OAAO,EAAE,CAAC,aAAa,EAAE,WAAW,CAAC,KAAK,CAAC;AACjE,sBAAsB,SAAS,EAAE,iBAAiB,IAAI,IAAI,EAAE,EAAE,WAAW,EAAE;AAC3E,sBAAsB,OAAO,EAAE,WAAW;AAC1C,sBAAsB,WAAW,EAAE,aAAa,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC,EAAE,EAAE;AACnE,qBAAqB,CAAC;AACtB,oBAAoB,WAAW,CAAC,CAAC,MAAM,EAAE,cAAc;;AAEvD,CAAC,CAAC;AACF,mBAAmB,CAAC,OAAO,UAAU,EAAE;AACvC,oBAAoB,OAAO,CAAC,KAAK,CAAC,CAAC,2BAA2B,EAAE,WAAW,CAAC,CAAC,CAAC,EAAE,UAAU,CAAC;AAC3F,oBAAoB,OAAO,EAAE;AAC7B;AACA;AACA,eAAe;AACf,aAAa,CAAC;AACd,WAAW,CAAC,OAAO,YAAY,EAAE;AACjC,YAAY,OAAO,CAAC,KAAK,CAAC,CAAC,UAAU,EAAE,WAAW,CAAC,gBAAgB,CAAC,EAAE,YAAY,CAAC;AACnF,YAAY,MAAM,YAAY,GAAG,YAAY,YAAY,KAAK,GAAG,YAAY,CAAC,OAAO,GAAG,MAAM,CAAC,YAAY,CAAC;AAC5G,YAAY,MAAM,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;AAC7C,cAAc,KAAK,EAAE,OAAO;AAC5B,cAAc,OAAO,EAAE,CAAC,UAAU,EAAE,WAAW,CAAC,oBAAoB,EAAE,YAAY,CAAC,CAAC;AACpF,cAAc,SAAS,EAAE,iBAAiB,IAAI,IAAI,EAAE,EAAE,WAAW,EAAE;AACnE,cAAc,OAAO,EAAE,WAAW;AAClC,cAAc,WAAW,EAAE,aAAa,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC,EAAE,EAAE;AAC3D,aAAa,CAAC;AACd,YAAY,WAAW,CAAC,CAAC,MAAM,EAAE,SAAS;;AAE1C,CAAC,CAAC;AACF,YAAY,OAAO,OAAO,CAAC,OAAO,EAAE;AACpC;AACA,SAAS,CAAC;AACV,QAAQ,OAAO,CAAC,UAAU,CAAC,cAAc,CAAC,CAAC,IAAI,CAAC,CAAC,OAAO,KAAK;AAC7D,UAAU,OAAO,CAAC,GAAG,CAAC,CAAC,0BAA0B,EAAE,OAAO,CAAC,kBAAkB,EAAE,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC;AACpG,UAAU,OAAO,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,KAAK,KAAK;AAC7C,YAAY,IAAI,MAAM,CAAC,MAAM,KAAK,UAAU,EAAE;AAC9C,cAAc,OAAO,CAAC,KAAK,CAAC,CAAC,kCAAkC,EAAE,KAAK,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,MAAM,CAAC;AACzF;AACA,WAAW,CAAC;AACZ,UAAU,IAAI,CAAC,QAAQ,IAAI,aAAa,CAAC,IAAI,KAAK,CAAC,EAAE;AACrD,YAAY,MAAM,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;AAC7C,cAAc,KAAK,EAAE,SAAS;AAC9B,cAAc,OAAO,EAAE,6DAA6D;AACpF,cAAc,SAAS,EAAE,iBAAiB,IAAI,IAAI,EAAE,EAAE,WAAW,EAAE;AACnE,cAAc,OAAO,EAAE,QAAQ;AAC/B,cAAc,WAAW,EAAE;AAC3B,aAAa,CAAC;AACd,YAAY,WAAW,CAAC,CAAC,MAAM,EAAE,SAAS;;AAE1C,CAAC,CAAC;AACF;AACA,SAAS,CAAC,CAAC,KAAK,CAAC,CAAC,UAAU,KAAK;AACjC,UAAU,OAAO,CAAC,KAAK,CAAC,+BAA+B,EAAE,UAAU,CAAC;AACpE,UAAU,IAAI,CAAC,QAAQ,EAAE;AACzB,YAAY,MAAM,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;AAC7C,cAAc,KAAK,EAAE,OAAO;AAC5B,cAAc,OAAO,EAAE,CAAC,6BAA6B,EAAE,UAAU,CAAC,OAAO,CAAC,CAAC;AAC3E,cAAc,SAAS,EAAE,iBAAiB,IAAI,IAAI,EAAE,EAAE,WAAW,EAAE;AACnE,cAAc,OAAO,EAAE,QAAQ;AAC/B,cAAc,WAAW,EAAE;AAC3B,aAAa,CAAC;AACd,YAAY,WAAW,CAAC,CAAC,MAAM,EAAE,SAAS;;AAE1C,CAAC,CAAC;AACF;AACA,SAAS,CAAC;AACV,QAAQ,OAAO,CAAC,MAAM,CAAC,gBAAgB,CAAC,OAAO,EAAE,OAAO,CAAC;AACzD,QAAQ,OAAO,OAAO;AACtB,OAAO;AACP,MAAM,MAAM,GAAG;AACf,QAAQ,OAAO,CAAC,GAAG,CAAC,CAAC,+BAA+B,EAAE,OAAO,CAAC,KAAK,CAAC,CAAC;AACrE;AACA,KAAK,CAAC;AACN,IAAI,OAAO,IAAI,QAAQ,CAAC,MAAM,EAAE;AAChC,MAAM,OAAO,EAAE;AACf,QAAQ,cAAc,EAAE,mBAAmB;AAC3C,QAAQ,eAAe,EAAE,UAAU;AACnC,QAAQ,UAAU,EAAE,YAAY;AAChC,QAAQ,6BAA6B,EAAE,GAAG;AAC1C,QAAQ,8BAA8B,EAAE;AACxC;AACA,KAAK,CAAC;AACN,GAAG,CAAC,OAAO,GAAG,EAAE;AAChB,IAAI,OAAO,CAAC,KAAK,CAAC,CAAC,+BAA+B,EAAE,OAAO,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC;AACpE,IAAI,MAAM,KAAK,CAAC,GAAG,EAAE,CAAC,6BAA6B,EAAE,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC;AACnE;AACA;;;;"}