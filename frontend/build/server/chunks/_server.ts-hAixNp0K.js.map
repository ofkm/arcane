{"version":3,"file":"_server.ts-hAixNp0K.js","sources":["../../../.svelte-kit/adapter-node/entries/endpoints/api/stacks/_stackId_/migrate/_server.ts.js"],"sourcesContent":["import { j as json } from \"../../../../../../chunks/index.js\";\nimport fs from \"node:fs/promises\";\nimport path__default from \"node:path\";\nimport slugify from \"slugify\";\nimport { ensureStacksDir, isStackRunning, stopStack, startStack } from \"../../../../../../chunks/stack-custom-service.js\";\nimport { A as ApiErrorCode } from \"../../../../../../chunks/errors.type.js\";\nimport { t as tryCatch } from \"../../../../../../chunks/try-catch.js\";\nasync function migrateStackToNameFolder(stackId) {\n  const stacksDir = await ensureStacksDir();\n  const oldDirPath = path__default.join(stacksDir, stackId);\n  const stat = await fs.stat(oldDirPath);\n  if (!stat.isDirectory()) throw new Error(`Stack directory \"${stackId}\" does not exist`);\n  const metaPath = path__default.join(oldDirPath, \"meta.json\");\n  const newMetaPath = path__default.join(oldDirPath, \".stack.json\");\n  try {\n    await fs.access(metaPath);\n  } catch {\n    throw new Error(`No meta.json found for stack \"${stackId}\"`);\n  }\n  try {\n    await fs.access(newMetaPath);\n    throw new Error(`Stack \"${stackId}\" is already migrated`);\n  } catch {\n  }\n  let wasRunning = false;\n  try {\n    wasRunning = await isStackRunning(stackId);\n  } catch {\n    wasRunning = false;\n  }\n  try {\n    await stopStack(stackId);\n    console.log(`Stopped stack \"${stackId}\" before migration.`);\n  } catch (err) {\n    console.warn(`Failed to stop stack \"${stackId}\" before migration:`, err);\n  }\n  const metaRaw = await fs.readFile(metaPath, \"utf8\");\n  const meta = JSON.parse(metaRaw);\n  const slug = slugify(meta.name, { lower: true, strict: true, trim: true });\n  let newDirName = slug;\n  let counter = 1;\n  const dirs = await fs.readdir(stacksDir);\n  while (dirs.includes(newDirName) && newDirName !== stackId) {\n    newDirName = `${slug}-${counter++}`;\n  }\n  const newDirPath = path__default.join(stacksDir, newDirName);\n  if (newDirName !== stackId) {\n    await fs.rename(oldDirPath, newDirPath);\n  }\n  try {\n    await fs.access(path__default.join(newDirPath, \"docker-compose.yml\"));\n    try {\n      await fs.access(path__default.join(newDirPath, \"compose.yaml\"));\n    } catch {\n      await fs.rename(path__default.join(newDirPath, \"docker-compose.yml\"), path__default.join(newDirPath, \"compose.yaml\"));\n      console.log(`Migrated docker-compose.yml to compose.yaml in \"${newDirName}\"`);\n    }\n  } catch {\n  }\n  meta.dirName = newDirName;\n  meta.path = newDirPath;\n  await fs.writeFile(path__default.join(newDirPath, \".stack.json\"), JSON.stringify(meta, null, 2), \"utf8\");\n  await fs.rm(path__default.join(newDirPath, \"meta.json\"));\n  console.log(`Migrated stack \"${meta.name}\" to folder \"${newDirName}\"`);\n  if (wasRunning) {\n    try {\n      await startStack(newDirName);\n      console.log(`Started stack \"${newDirName}\" after migration.`);\n    } catch (err) {\n      console.warn(`Failed to start stack \"${newDirName}\" after migration:`, err);\n    }\n  }\n}\nconst POST = async ({ params }) => {\n  const { stackId } = params;\n  if (!stackId) {\n    const response = {\n      success: false,\n      error: \"Missing stackId\",\n      code: ApiErrorCode.BAD_REQUEST\n    };\n    return json(response, { status: 400 });\n  }\n  const result = await tryCatch(migrateStackToNameFolder(stackId));\n  if (result.error) {\n    console.error(\"Error migrating stack:\", result.error);\n    const response = {\n      success: false,\n      error: result.error.message || \"Failed to migrate stack\",\n      code: ApiErrorCode.INTERNAL_SERVER_ERROR,\n      details: result.error\n    };\n    return json(response, { status: 500 });\n  }\n  return json({\n    success: true,\n    message: `Stack \"${stackId}\" migrated successfully.`\n  });\n};\nexport {\n  POST\n};\n"],"names":[],"mappings":"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"}