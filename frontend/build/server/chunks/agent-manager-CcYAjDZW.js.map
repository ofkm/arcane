{"version":3,"file":"agent-manager-CcYAjDZW.js","sources":["../../../.svelte-kit/adapter-node/chunks/agent-manager.js"],"sourcesContent":["import { nanoid } from \"nanoid\";\nimport fs from \"fs/promises\";\nimport path__default from \"node:path\";\nimport { B as BASE_PATH, d as deploymentsTable, a as agentsTable, b as agentTasksTable } from \"./schema.js\";\nimport { eq, desc } from \"drizzle-orm\";\nimport { d as db } from \"./index4.js\";\npath__default.join(BASE_PATH, \"deployments\");\nasync function getDeploymentsFromDb(agentId) {\n  try {\n    const query = agentId ? db.select().from(deploymentsTable).where(eq(deploymentsTable.agentId, agentId)) : db.select().from(deploymentsTable);\n    const dbDeployments = await query;\n    return dbDeployments.map((dbDeployment) => ({\n      id: dbDeployment.id,\n      name: dbDeployment.name,\n      type: dbDeployment.type,\n      status: dbDeployment.status,\n      agentId: dbDeployment.agentId,\n      taskId: dbDeployment.taskId || void 0,\n      error: dbDeployment.error || void 0,\n      metadata: dbDeployment.metadata ? JSON.parse(dbDeployment.metadata) : void 0,\n      createdAt: dbDeployment.createdAt.toISOString(),\n      updatedAt: dbDeployment.updatedAt?.toISOString()\n    }));\n  } catch (error) {\n    console.error(\"Failed to get deployments from database:\", error);\n    return [];\n  }\n}\nasync function saveDeploymentToDb(deployment) {\n  try {\n    const now = /* @__PURE__ */ new Date();\n    const createdAtForDb = new Date(deployment.createdAt);\n    const deploymentData = {\n      id: deployment.id,\n      name: deployment.name,\n      type: deployment.type,\n      status: deployment.status,\n      agentId: deployment.agentId,\n      taskId: deployment.taskId || null,\n      error: deployment.error || null,\n      metadata: deployment.metadata ? JSON.stringify(deployment.metadata) : null,\n      createdAt: createdAtForDb,\n      updatedAt: now\n    };\n    const existing = await db.select({ id: deploymentsTable.id }).from(deploymentsTable).where(eq(deploymentsTable.id, deployment.id)).limit(1);\n    if (existing.length > 0) {\n      await db.update(deploymentsTable).set({\n        ...deploymentData,\n        updatedAt: now\n      }).where(eq(deploymentsTable.id, deployment.id));\n    } else {\n      await db.insert(deploymentsTable).values(deploymentData);\n    }\n    return deployment;\n  } catch (error) {\n    console.error(\"Failed to save deployment to database:\", error);\n    throw error;\n  }\n}\nasync function updateDeploymentInDb(deploymentId, updates) {\n  try {\n    const updateData = {\n      updatedAt: /* @__PURE__ */ new Date()\n    };\n    if (updates.status !== void 0) updateData.status = updates.status;\n    if (updates.error !== void 0) updateData.error = updates.error;\n    if (updates.metadata !== void 0) {\n      updateData.metadata = updates.metadata ? JSON.stringify(updates.metadata) : null;\n    }\n    await db.update(deploymentsTable).set(updateData).where(eq(deploymentsTable.id, deploymentId));\n  } catch (error) {\n    console.error(\"Failed to update deployment in database:\", error);\n    throw error;\n  }\n}\nasync function getDeploymentByTaskIdFromDb(taskId) {\n  try {\n    const dbDeployments = await db.select().from(deploymentsTable).where(eq(deploymentsTable.taskId, taskId)).limit(1);\n    if (dbDeployments.length === 0) {\n      return null;\n    }\n    const dbDeployment = dbDeployments[0];\n    return {\n      id: dbDeployment.id,\n      name: dbDeployment.name,\n      type: dbDeployment.type,\n      status: dbDeployment.status,\n      agentId: dbDeployment.agentId,\n      taskId: dbDeployment.taskId || void 0,\n      error: dbDeployment.error || void 0,\n      metadata: dbDeployment.metadata ? JSON.parse(dbDeployment.metadata) : void 0,\n      createdAt: dbDeployment.createdAt.toISOString(),\n      updatedAt: dbDeployment.updatedAt?.toISOString()\n    };\n  } catch (error) {\n    console.error(\"Failed to get deployment by task ID from database:\", error);\n    return null;\n  }\n}\nconst DEPLOYMENTS_DIR = path__default.join(BASE_PATH, \"deployments\");\nawait fs.mkdir(DEPLOYMENTS_DIR, { recursive: true });\nasync function createDeployment(deployment) {\n  const newDeployment = {\n    ...deployment,\n    id: nanoid(),\n    createdAt: (/* @__PURE__ */ new Date()).toISOString(),\n    updatedAt: (/* @__PURE__ */ new Date()).toISOString()\n  };\n  return await saveDeploymentToDb(newDeployment);\n}\nasync function getDeployments(agentId) {\n  return await getDeploymentsFromDb(agentId);\n}\nasync function createStackDeployment(agentId, stackName, composeContent, envContent, taskId) {\n  return createDeployment({\n    name: stackName,\n    type: \"stack\",\n    status: \"pending\",\n    agentId,\n    metadata: {\n      stackName,\n      composeContent,\n      envContent\n    },\n    taskId\n  });\n}\nasync function createContainerDeployment(agentId, containerName, imageName, ports, volumes, taskId) {\n  return createDeployment({\n    name: containerName || imageName,\n    type: \"container\",\n    status: \"pending\",\n    agentId,\n    metadata: {\n      containerName,\n      imageName,\n      ports,\n      volumes\n    },\n    taskId\n  });\n}\nasync function updateDeploymentFromTask(taskId, status, result, error) {\n  try {\n    const deployment = await getDeploymentByTaskIdFromDb(taskId);\n    if (!deployment) {\n      return;\n    }\n    let deploymentStatus;\n    switch (status) {\n      case \"running\":\n        deploymentStatus = \"running\";\n        break;\n      case \"completed\":\n        deploymentStatus = \"completed\";\n        break;\n      case \"failed\":\n        deploymentStatus = \"failed\";\n        break;\n      default:\n        deploymentStatus = \"pending\";\n    }\n    await updateDeploymentInDb(deployment.id, {\n      status: deploymentStatus,\n      error: error || void 0\n    });\n    console.log(`Deployment ${deployment.id} updated to status: ${deploymentStatus}`);\n  } catch (error2) {\n    console.error(\"Failed to update deployment from task:\", error2);\n  }\n}\nconst safeTimestamp = (timestamp, fallback = /* @__PURE__ */ new Date()) => {\n  if (!timestamp || timestamp === null || timestamp === void 0) {\n    return fallback.toISOString();\n  }\n  if (typeof timestamp === \"string\") {\n    const date = new Date(timestamp);\n    return isNaN(date.getTime()) ? fallback.toISOString() : date.toISOString();\n  }\n  if (typeof timestamp === \"number\" && !isNaN(timestamp)) {\n    const date = timestamp > 946684800 ? new Date(timestamp * 1e3) : new Date(timestamp);\n    return isNaN(date.getTime()) ? fallback.toISOString() : date.toISOString();\n  }\n  return fallback.toISOString();\n};\nfunction dbAgentToAgent(dbAgent) {\n  return {\n    id: dbAgent.id,\n    hostname: dbAgent.hostname,\n    platform: dbAgent.platform,\n    version: dbAgent.version,\n    capabilities: Array.isArray(dbAgent.capabilities) ? dbAgent.capabilities : JSON.parse(dbAgent.capabilities || \"[]\"),\n    status: dbAgent.status,\n    lastSeen: safeTimestamp(dbAgent.lastSeen),\n    registeredAt: safeTimestamp(dbAgent.registeredAt),\n    metrics: {\n      containerCount: dbAgent.containerCount,\n      imageCount: dbAgent.imageCount,\n      stackCount: dbAgent.stackCount,\n      networkCount: dbAgent.networkCount,\n      volumeCount: dbAgent.volumeCount\n    },\n    dockerInfo: dbAgent.dockerVersion ? {\n      version: dbAgent.dockerVersion,\n      containers: dbAgent.dockerContainers || 0,\n      images: dbAgent.dockerImages || 0\n    } : void 0,\n    metadata: dbAgent.metadata ? typeof dbAgent.metadata === \"string\" ? JSON.parse(dbAgent.metadata) : dbAgent.metadata : void 0,\n    createdAt: safeTimestamp(dbAgent.createdAt),\n    updatedAt: dbAgent.updatedAt ? safeTimestamp(dbAgent.updatedAt) : void 0\n  };\n}\nfunction dbTaskToAgentTask(dbTask) {\n  const safeTimestamp2 = (timestamp, fallback = /* @__PURE__ */ new Date()) => {\n    if (!timestamp || timestamp === null || timestamp === void 0) {\n      return fallback.toISOString();\n    }\n    if (typeof timestamp === \"string\") {\n      const date = new Date(timestamp);\n      return isNaN(date.getTime()) ? fallback.toISOString() : date.toISOString();\n    }\n    if (typeof timestamp === \"number\" && !isNaN(timestamp)) {\n      const date = timestamp > 946684800 ? new Date(timestamp * 1e3) : new Date(timestamp);\n      return isNaN(date.getTime()) ? fallback.toISOString() : date.toISOString();\n    }\n    return fallback.toISOString();\n  };\n  return {\n    id: dbTask.id,\n    agentId: dbTask.agentId,\n    type: dbTask.type,\n    payload: typeof dbTask.payload === \"string\" ? JSON.parse(dbTask.payload) : dbTask.payload,\n    status: dbTask.status,\n    result: dbTask.result ? typeof dbTask.result === \"string\" ? JSON.parse(dbTask.result) : dbTask.result : void 0,\n    error: dbTask.error,\n    createdAt: safeTimestamp2(dbTask.createdAt),\n    updatedAt: dbTask.updatedAt ? safeTimestamp2(dbTask.updatedAt) : void 0\n  };\n}\nfunction agentToDbAgent(agent) {\n  return {\n    id: agent.id,\n    hostname: agent.hostname,\n    platform: agent.platform,\n    version: agent.version,\n    capabilities: JSON.stringify(agent.capabilities),\n    status: agent.status,\n    lastSeen: new Date(agent.lastSeen),\n    // Use Date object\n    registeredAt: new Date(agent.registeredAt),\n    // Use Date object\n    containerCount: agent.metrics?.containerCount,\n    imageCount: agent.metrics?.imageCount,\n    stackCount: agent.metrics?.stackCount,\n    networkCount: agent.metrics?.networkCount,\n    volumeCount: agent.metrics?.volumeCount,\n    dockerVersion: agent.dockerInfo?.version,\n    dockerContainers: agent.dockerInfo?.containers,\n    dockerImages: agent.dockerInfo?.images,\n    metadata: agent.metadata ? JSON.stringify(agent.metadata) : null,\n    updatedAt: /* @__PURE__ */ new Date()\n    // Use Date object\n  };\n}\nfunction agentTaskToDbTask(task) {\n  return {\n    id: task.id,\n    agentId: task.agentId,\n    type: task.type,\n    payload: JSON.stringify(task.payload),\n    status: task.status,\n    result: task.result ? JSON.stringify(task.result) : null,\n    error: task.error,\n    startedAt: task.status === \"running\" ? /* @__PURE__ */ new Date() : null,\n    // Use Date object\n    completedAt: task.status === \"completed\" || task.status === \"failed\" ? /* @__PURE__ */ new Date() : null,\n    // Use Date object\n    updatedAt: /* @__PURE__ */ new Date()\n    // Use Date object\n  };\n}\nasync function registerAgentInDb(agent) {\n  try {\n    const agentData = agentToDbAgent(agent);\n    const existing = await getAgentByIdFromDb(agent.id);\n    if (existing) {\n      await db.update(agentsTable).set({\n        ...agentData,\n        updatedAt: /* @__PURE__ */ new Date()\n        // Use Date object\n      }).where(eq(agentsTable.id, agent.id));\n    } else {\n      await db.insert(agentsTable).values({\n        ...agentData,\n        createdAt: /* @__PURE__ */ new Date(),\n        // Use Date object\n        updatedAt: /* @__PURE__ */ new Date()\n        // Use Date object\n      });\n    }\n    return agent;\n  } catch (error) {\n    console.error(\"Failed to register agent in database:\", error);\n    throw error;\n  }\n}\nasync function getAgentByIdFromDb(agentId) {\n  try {\n    const result = await db.select().from(agentsTable).where(eq(agentsTable.id, agentId)).limit(1);\n    if (result.length === 0) {\n      return null;\n    }\n    return dbAgentToAgent(result[0]);\n  } catch (error) {\n    console.error(\"Failed to get agent from database:\", error);\n    throw error;\n  }\n}\nasync function updateAgentInDb(agentId, updates) {\n  try {\n    const existing = await getAgentByIdFromDb(agentId);\n    if (!existing) {\n      throw new Error(\"Agent not found\");\n    }\n    const updated = {\n      ...existing,\n      ...updates,\n      updatedAt: (/* @__PURE__ */ new Date()).toISOString()\n    };\n    const agentData = agentToDbAgent(updated);\n    await db.update(agentsTable).set(agentData).where(eq(agentsTable.id, agentId));\n    return updated;\n  } catch (error) {\n    console.error(\"Failed to update agent in database:\", error);\n    throw error;\n  }\n}\nasync function updateAgentHeartbeatInDb(agentId) {\n  try {\n    await db.update(agentsTable).set({\n      status: \"online\",\n      lastSeen: /* @__PURE__ */ new Date(),\n      // Use Date object\n      updatedAt: /* @__PURE__ */ new Date()\n      // Use Date object\n    }).where(eq(agentsTable.id, agentId));\n  } catch (error) {\n    console.error(\"Failed to update agent heartbeat in database:\", error);\n    throw error;\n  }\n}\nasync function listAgentsFromDb() {\n  try {\n    const result = await db.select().from(agentsTable).orderBy(desc(agentsTable.lastSeen));\n    return result.map(dbAgentToAgent);\n  } catch (error) {\n    console.error(\"Failed to list agents from database:\", error);\n    throw error;\n  }\n}\nasync function deleteAgentFromDb(agentId) {\n  try {\n    await db.delete(agentTasksTable).where(eq(agentTasksTable.agentId, agentId));\n    await db.delete(agentsTable).where(eq(agentsTable.id, agentId));\n  } catch (error) {\n    console.error(\"Failed to delete agent from database:\", error);\n    throw error;\n  }\n}\nasync function createTaskInDb(task) {\n  try {\n    const taskData = {\n      ...agentTaskToDbTask(task),\n      createdAt: /* @__PURE__ */ new Date(),\n      // Use Date object\n      updatedAt: /* @__PURE__ */ new Date()\n      // Use Date object\n    };\n    await db.insert(agentTasksTable).values(taskData);\n    return {\n      ...task,\n      createdAt: (/* @__PURE__ */ new Date()).toISOString(),\n      updatedAt: (/* @__PURE__ */ new Date()).toISOString()\n    };\n  } catch (error) {\n    console.error(\"Failed to create task in database:\", error);\n    throw error;\n  }\n}\nasync function getTaskByIdFromDb(taskId) {\n  try {\n    const result = await db.select().from(agentTasksTable).where(eq(agentTasksTable.id, taskId)).limit(1);\n    if (result.length === 0) {\n      return null;\n    }\n    return dbTaskToAgentTask(result[0]);\n  } catch (error) {\n    console.error(\"Failed to get task from database:\", error);\n    throw error;\n  }\n}\nasync function updateTaskStatusInDb(taskId, status, result, error) {\n  try {\n    const updateData = {\n      status,\n      updatedAt: /* @__PURE__ */ new Date()\n      // Use Date object\n    };\n    if (result !== void 0) {\n      updateData.result = JSON.stringify(result);\n    }\n    if (error !== void 0) {\n      updateData.error = error;\n    }\n    if (status === \"running\") {\n      updateData.startedAt = /* @__PURE__ */ new Date();\n    } else if (status === \"completed\" || status === \"failed\") {\n      updateData.completedAt = /* @__PURE__ */ new Date();\n    }\n    await db.update(agentTasksTable).set(updateData).where(eq(agentTasksTable.id, taskId));\n  } catch (error2) {\n    console.error(\"Failed to update task status in database:\", error2);\n    throw error2;\n  }\n}\nasync function listTasksFromDb(agentId) {\n  try {\n    const baseQuery = db.select().from(agentTasksTable);\n    const result = agentId ? await baseQuery.where(eq(agentTasksTable.agentId, agentId)).orderBy(desc(agentTasksTable.createdAt)) : await baseQuery.orderBy(desc(agentTasksTable.createdAt));\n    return result.map(dbTaskToAgentTask);\n  } catch (error) {\n    console.error(\"Failed to list tasks from database:\", error);\n    throw error;\n  }\n}\nasync function getAgentTasksFromDb(agentId) {\n  return listTasksFromDb(agentId);\n}\nasync function registerAgent(agent) {\n  try {\n    const existing = await getAgent(agent.id);\n    if (existing) {\n      return await updateAgent(agent.id, {\n        ...agent,\n        status: \"online\",\n        lastSeen: (/* @__PURE__ */ new Date()).toISOString(),\n        updatedAt: (/* @__PURE__ */ new Date()).toISOString()\n      });\n    } else {\n      const newAgent = {\n        ...agent,\n        createdAt: (/* @__PURE__ */ new Date()).toISOString(),\n        updatedAt: (/* @__PURE__ */ new Date()).toISOString()\n      };\n      return await registerAgentInDb(newAgent);\n    }\n  } catch (error) {\n    console.error(\"Failed to register agent:\", error);\n    throw error;\n  }\n}\nasync function getAgent(agentId) {\n  try {\n    return await getAgentByIdFromDb(agentId);\n  } catch (error) {\n    console.error(\"Failed to get agent:\", error);\n    return null;\n  }\n}\nasync function updateAgent(agentId, updates) {\n  try {\n    return await updateAgentInDb(agentId, updates);\n  } catch (error) {\n    console.error(\"Failed to update agent:\", error);\n    throw error;\n  }\n}\nasync function updateAgentHeartbeat(agentId) {\n  try {\n    await updateAgentHeartbeatInDb(agentId);\n  } catch (error) {\n    console.error(\"Failed to update agent heartbeat:\", error);\n  }\n}\nasync function listAgents() {\n  try {\n    return await listAgentsFromDb();\n  } catch (error) {\n    console.error(\"Failed to list agents:\", error);\n    return [];\n  }\n}\nasync function deleteAgent(agentId) {\n  try {\n    await deleteAgentFromDb(agentId);\n    console.log(`Agent ${agentId} deleted successfully`);\n  } catch (error) {\n    console.error(\"Failed to delete agent:\", error);\n    throw error;\n  }\n}\nasync function sendTaskToAgent(agentId, taskType, payload) {\n  try {\n    const agent = await getAgent(agentId);\n    if (!agent) {\n      throw new Error(`Agent ${agentId} not found`);\n    }\n    if (agent.status !== \"online\") {\n      throw new Error(`Agent ${agentId} is not online (status: ${agent.status})`);\n    }\n    const task = {\n      id: nanoid(),\n      agentId,\n      type: taskType,\n      // No casting needed anymore!\n      payload,\n      status: \"pending\",\n      createdAt: (/* @__PURE__ */ new Date()).toISOString()\n    };\n    await createTaskInDb(task);\n    console.log(`📋 Task ${task.id} created for agent ${agentId} (will be picked up on next poll)`);\n    return task;\n  } catch (error) {\n    console.error(\"Failed to send task to agent:\", error);\n    throw error;\n  }\n}\nasync function updateTaskStatus(taskId, status, result, error) {\n  try {\n    await updateTaskStatusInDb(taskId, status, result, error);\n    await updateDeploymentFromTask(taskId, status, result, error);\n    console.log(`Task ${taskId} status updated to: ${status}`);\n  } catch (dbError) {\n    console.error(\"Error updating task status:\", dbError);\n  }\n}\nasync function getTask(taskId) {\n  try {\n    return await getTaskByIdFromDb(taskId);\n  } catch (error) {\n    console.error(\"Failed to get task:\", error);\n    return null;\n  }\n}\nasync function listTasks(agentId) {\n  try {\n    return await listTasksFromDb(agentId);\n  } catch (error) {\n    console.error(\"Failed to list tasks:\", error);\n    return [];\n  }\n}\nasync function getAgentTasks(agentId) {\n  try {\n    return await getAgentTasksFromDb(agentId);\n  } catch (error) {\n    console.error(\"Failed to get agent tasks:\", error);\n    return [];\n  }\n}\nasync function pullImageOnAgent(agentId, imageName) {\n  return sendTaskToAgent(agentId, \"image_pull\", {\n    imageName\n  });\n}\nexport {\n  updateAgentHeartbeat as a,\n  getDeployments as b,\n  createContainerDeployment as c,\n  deleteAgent as d,\n  createStackDeployment as e,\n  listTasks as f,\n  getAgent as g,\n  getTask as h,\n  updateTaskStatus as i,\n  getAgentTasks as j,\n  getDeploymentsFromDb as k,\n  listAgents as l,\n  pullImageOnAgent as p,\n  registerAgent as r,\n  sendTaskToAgent as s,\n  updateAgent as u\n};\n"],"names":[],"mappings":"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"}