{"version":3,"file":"auto-update-service-COdTzVd9.js","sources":["../../../.svelte-kit/adapter-node/chunks/auto-update-service.js"],"sourcesContent":["import { l as listContainers, g as getContainer, d as recreateContainer } from \"./container-service.js\";\nimport { listStacks, redeployStack, getStack } from \"./stack-custom-service.js\";\nimport { p as pullImage, g as getImage } from \"./image-service.js\";\nimport { g as getSettings } from \"./settings-service.js\";\nimport yaml from \"js-yaml\";\nconst updatingContainers = /* @__PURE__ */ new Set();\nconst updatingStacks = /* @__PURE__ */ new Set();\nasync function checkAndUpdateContainers() {\n  const settings = await getSettings();\n  if (!settings.autoUpdate) {\n    console.log(\"Auto-update is disabled globally\");\n    return { checked: 0, updated: 0, errors: [] };\n  }\n  console.log(\"Starting container auto-update check...\");\n  const containers = await listContainers();\n  const eligibleContainers = [];\n  for (const container of containers) {\n    if (container.State !== \"running\") continue;\n    try {\n      const containerDetails = await getContainer(container.Id);\n      if (containerDetails?.Config?.Labels?.[\"arcane.auto-update\"] === \"true\") {\n        eligibleContainers.push(container);\n        console.log(`Container ${getContainerName(container)} is eligible for auto-update`);\n      }\n    } catch (error) {\n      console.error(`Error fetching container details for ${container.Id}:`, error);\n    }\n  }\n  const results = {\n    checked: eligibleContainers.length,\n    updated: 0,\n    errors: []\n  };\n  console.log(`Found ${eligibleContainers.length} containers eligible for auto-update`);\n  for (const container of eligibleContainers) {\n    const containerId = container.Id;\n    const containerName = getContainerName(container);\n    try {\n      if (updatingContainers.has(containerId)) {\n        console.log(`Skipping ${containerName}, already updating`);\n        continue;\n      }\n      updatingContainers.add(containerId);\n      console.log(`Checking for updates: ${containerName}`);\n      const updateAvailable = await checkContainerImageUpdate(container);\n      if (updateAvailable) {\n        console.log(`Update available for ${containerName}, recreating...`);\n        await pullImage(container.Image);\n        await recreateContainer(containerId);\n        console.log(`Successfully updated ${containerName}`);\n        results.updated++;\n      } else {\n        console.log(`${containerName} is up-to-date`);\n      }\n    } catch (error) {\n      console.error(`Error updating container ${containerName}:`, error);\n      const msg = error instanceof Error ? error.message : String(error);\n      results.errors.push({ id: containerId, error: msg });\n    } finally {\n      updatingContainers.delete(containerId);\n    }\n  }\n  console.log(`Container auto-update completed: ${results.updated}/${results.checked} updated`);\n  return results;\n}\nasync function checkAndUpdateStacks() {\n  const settings = await getSettings();\n  if (!settings.autoUpdate) {\n    console.log(\"Auto-update is disabled globally\");\n    return { checked: 0, updated: 0, errors: [] };\n  }\n  console.log(\"Starting stack auto-update check...\");\n  const allStacks = await listStacks();\n  const eligibleStacks = [];\n  for (const stack of allStacks) {\n    if (stack.status !== \"running\" && stack.status !== \"partially running\") {\n      console.log(`Skipping stack ${stack.name} - not running (status: ${stack.status})`);\n      continue;\n    }\n    try {\n      const isEligible = await isStackEligibleForAutoUpdate(stack);\n      if (isEligible) {\n        eligibleStacks.push(stack);\n        console.log(`Stack ${stack.name} is eligible for auto-update`);\n      } else {\n        console.log(`Stack ${stack.name} is not eligible for auto-update (no label found)`);\n      }\n    } catch (error) {\n      console.error(`Error checking eligibility for stack ${stack.name}:`, error);\n    }\n  }\n  const results = {\n    checked: eligibleStacks.length,\n    updated: 0,\n    errors: []\n  };\n  console.log(`Found ${eligibleStacks.length} stacks eligible for auto-update`);\n  for (const stack of eligibleStacks) {\n    try {\n      if (updatingStacks.has(stack.id)) {\n        console.log(`Skipping stack ${stack.name}, already updating`);\n        continue;\n      }\n      updatingStacks.add(stack.id);\n      console.log(`Checking for updates: ${stack.name}`);\n      const updateAvailable = await checkStackImagesUpdate(stack);\n      if (updateAvailable) {\n        console.log(`Updates available for stack ${stack.name}, redeploying...`);\n        await redeployStack(stack.id);\n        console.log(`Successfully redeployed stack ${stack.name}`);\n        results.updated++;\n      } else {\n        console.log(`Stack ${stack.name} is up-to-date`);\n      }\n    } catch (error) {\n      console.error(`Error updating stack ${stack.name}:`, error);\n      const msg = error instanceof Error ? error.message : String(error);\n      results.errors.push({ id: stack.id, error: msg });\n    } finally {\n      updatingStacks.delete(stack.id);\n    }\n  }\n  console.log(`Stack auto-update completed: ${results.updated}/${results.checked} updated`);\n  return results;\n}\nasync function isStackEligibleForAutoUpdate(stack) {\n  try {\n    const fullStack = await getStack(stack.id);\n    if (!fullStack?.composeContent) {\n      console.warn(`Stack ${stack.name} has no compose content`);\n      return false;\n    }\n    const composeData = yaml.load(fullStack.composeContent);\n    if (!composeData?.services) {\n      console.warn(`Stack ${stack.name} has no services in compose file`);\n      return false;\n    }\n    for (const [serviceName, service] of Object.entries(composeData.services)) {\n      if (hasAutoUpdateLabel(service)) {\n        console.log(`Found auto-update label in service ${serviceName} of stack ${stack.name}`);\n        return true;\n      }\n    }\n    return false;\n  } catch (error) {\n    console.error(`Error parsing compose file for stack ${stack.name}:`, error);\n    return false;\n  }\n}\nfunction hasAutoUpdateLabel(service) {\n  if (!service?.labels) return false;\n  if (Array.isArray(service.labels)) {\n    return service.labels.some((label) => typeof label === \"string\" && (label === \"arcane.stack.auto-update=true\" || label.startsWith(\"arcane.stack.auto-update=true\")));\n  }\n  if (typeof service.labels === \"object\" && service.labels !== null) {\n    return service.labels[\"arcane.stack.auto-update\"] === \"true\" || service.labels[\"arcane.stack.auto-update\"] === true;\n  }\n  return false;\n}\nasync function checkContainerImageUpdate(container) {\n  const containerName = getContainerName(container);\n  try {\n    const imageRef = container.Image;\n    if (/^sha256:[A-Fa-f0-9]{64}$/.test(imageRef)) {\n      console.log(`Skipping ${containerName} - using digest-based image`);\n      return false;\n    }\n    const currentImage = await getImage(container.ImageID);\n    if (!currentImage) {\n      console.warn(`Current image not found for ${containerName}`);\n      return false;\n    }\n    console.log(`Pulling latest ${imageRef} for ${containerName}...`);\n    await pullImage(imageRef);\n    const updatedImage = await getImage(imageRef);\n    if (!updatedImage) {\n      console.warn(`Updated image not found after pull for ${containerName}`);\n      return false;\n    }\n    const hasUpdate = updatedImage.Id !== container.ImageID;\n    if (hasUpdate) {\n      console.log(`Update found for ${containerName}: ${container.ImageID} -> ${updatedImage.Id}`);\n    }\n    return hasUpdate;\n  } catch (error) {\n    console.error(`Error checking image update for ${containerName}:`, error);\n    return false;\n  }\n}\nasync function checkStackImagesUpdate(stack) {\n  try {\n    const fullStack = await getStack(stack.id);\n    if (!fullStack?.composeContent) {\n      console.warn(`No compose content for stack ${stack.name}`);\n      return false;\n    }\n    const imageRefs = extractImageReferences(fullStack.composeContent);\n    if (imageRefs.length === 0) {\n      console.log(`No images found in stack ${stack.name}`);\n      return false;\n    }\n    console.log(`Checking ${imageRefs.length} images for stack ${stack.name}: ${imageRefs.join(\", \")}`);\n    let updateFound = false;\n    for (const imageRef of imageRefs) {\n      try {\n        if (/^sha256:[A-Fa-f0-9]{64}$/.test(imageRef)) {\n          console.log(`Skipping digest-based image: ${imageRef}`);\n          continue;\n        }\n        const hasUpdate = await checkImageUpdate(imageRef);\n        if (hasUpdate) {\n          console.log(`Update found for image ${imageRef} in stack ${stack.name}`);\n          updateFound = true;\n        }\n      } catch (error) {\n        console.error(`Error checking image ${imageRef} in stack ${stack.name}:`, error);\n      }\n    }\n    return updateFound;\n  } catch (error) {\n    console.error(`Error checking stack images for ${stack.name}:`, error);\n    return false;\n  }\n}\nfunction extractImageReferences(composeContent) {\n  try {\n    const composeData = yaml.load(composeContent);\n    const images = [];\n    if (composeData?.services) {\n      for (const [serviceName, service] of Object.entries(composeData.services)) {\n        const serviceObj = service;\n        if (serviceObj?.image && typeof serviceObj.image === \"string\") {\n          images.push(serviceObj.image.trim());\n        }\n      }\n    }\n    return [...new Set(images)];\n  } catch (error) {\n    console.error(\"Error parsing compose content for images:\", error);\n    return [];\n  }\n}\nasync function checkImageUpdate(imageRef) {\n  try {\n    let currentImageId = null;\n    try {\n      const currentImage = await getImage(imageRef);\n      currentImageId = currentImage?.Id || null;\n    } catch (error) {\n      console.log(`Image ${imageRef} not found locally, will pull fresh`);\n    }\n    console.log(`Pulling ${imageRef}...`);\n    await pullImage(imageRef);\n    const newImage = await getImage(imageRef);\n    if (!newImage) {\n      console.warn(`Failed to get image details after pull: ${imageRef}`);\n      return false;\n    }\n    if (!currentImageId) {\n      console.log(`New image pulled: ${imageRef}`);\n      return true;\n    }\n    const hasUpdate = newImage.Id !== currentImageId;\n    if (hasUpdate) {\n      console.log(`Image updated: ${imageRef} (${currentImageId} -> ${newImage.Id})`);\n    } else {\n      console.log(`Image up-to-date: ${imageRef}`);\n    }\n    return hasUpdate;\n  } catch (error) {\n    console.error(`Error checking image update for ${imageRef}:`, error);\n    return false;\n  }\n}\nfunction getContainerName(container) {\n  if (container.Names && container.Names.length > 0) {\n    return container.Names[0].startsWith(\"/\") ? container.Names[0].substring(1) : container.Names[0];\n  }\n  return container.Id.substring(0, 12);\n}\nexport {\n  checkAndUpdateStacks as a,\n  checkAndUpdateContainers as c\n};\n"],"names":[],"mappings":"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"}