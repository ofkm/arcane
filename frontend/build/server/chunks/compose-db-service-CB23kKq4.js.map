{"version":3,"file":"compose-db-service-CB23kKq4.js","sources":["../../../.svelte-kit/adapter-node/chunks/compose-db-service.js"],"sourcesContent":["import { eq } from \"drizzle-orm\";\nimport { f as stacksTable, S as STACKS_DIR } from \"./schema.js\";\nimport fs from \"node:fs/promises\";\nimport path__default from \"node:path\";\nimport { d as db } from \"./index4.js\";\nfunction ensureDateObject(dateInput) {\n  if (dateInput === null || dateInput === void 0) return null;\n  if (dateInput instanceof Date) return dateInput;\n  if (typeof dateInput === \"string\") return new Date(dateInput);\n  if (typeof dateInput === \"number\") {\n    return new Date(dateInput * (dateInput < 1e12 ? 1e3 : 1));\n  }\n  console.warn(\"ensureDateObject received invalid input:\", dateInput);\n  return null;\n}\nasync function loadStacksFromFiles() {\n  try {\n    const stackDirEntries = await fs.readdir(STACKS_DIR, { withFileTypes: true });\n    const stacks = [];\n    for (const entry of stackDirEntries) {\n      if (!entry.isDirectory()) {\n        continue;\n      }\n      const dirName = entry.name;\n      const stackDir = path__default.join(STACKS_DIR, dirName);\n      let composeContent = \"\";\n      const potentialComposePaths = [path__default.join(stackDir, \"compose.yaml\"), path__default.join(stackDir, \"docker-compose.yml\"), path__default.join(stackDir, \"compose.yml\"), path__default.join(stackDir, \"docker-compose.yaml\")];\n      for (const p of potentialComposePaths) {\n        try {\n          await fs.access(p);\n          composeContent = await fs.readFile(p, \"utf8\");\n          break;\n        } catch {\n        }\n      }\n      if (!composeContent) {\n        console.warn(`No compose file found in directory ${dirName}, skipping.`);\n        continue;\n      }\n      let dirStat;\n      try {\n        dirStat = await fs.stat(stackDir);\n      } catch (statErr) {\n        console.error(`Could not stat directory ${stackDir}:`, statErr);\n        const now = /* @__PURE__ */ new Date();\n        dirStat = { birthtime: now, mtime: now };\n      }\n      stacks.push({\n        id: dirName,\n        name: dirName,\n        serviceCount: 0,\n        runningCount: 0,\n        status: \"unknown\",\n        createdAt: dirStat.birthtime.toISOString(),\n        updatedAt: dirStat.mtime.toISOString(),\n        isExternal: false\n      });\n    }\n    return stacks;\n  } catch (err) {\n    console.error(\"Error loading stacks from STACKS_DIR:\", err);\n    throw new Error(\"Failed to load compose stacks\");\n  }\n}\nasync function migrateStacksToDatabase(backupOldFiles = true) {\n  const errors = [];\n  let migratedCount = 0;\n  try {\n    console.log(\"Starting stack migration from file to database...\");\n    const fileStacks = await loadStacksFromFiles();\n    console.log(`Found ${fileStacks.length} stacks in file system`);\n    if (fileStacks.length === 0) {\n      console.log(\"No stacks found in file system. Migration completed.\");\n      return { success: true, migratedCount: 0, errors: [] };\n    }\n    const existingStacks = await db.select({ id: stacksTable.id }).from(stacksTable).limit(1);\n    if (existingStacks.length > 0) {\n      console.log(\"Stacks already exist in database. Migration aborted.\");\n      return { success: false, migratedCount: 0, errors: [\"Stacks already exist in database\"] };\n    }\n    for (const stack of fileStacks) {\n      try {\n        const stackDir = path__default.join(STACKS_DIR, stack.id);\n        let composeContent = \"\";\n        let envContent = \"\";\n        const potentialComposePaths = [path__default.join(stackDir, \"compose.yaml\"), path__default.join(stackDir, \"docker-compose.yml\"), path__default.join(stackDir, \"compose.yml\"), path__default.join(stackDir, \"docker-compose.yaml\")];\n        for (const composePath of potentialComposePaths) {\n          try {\n            composeContent = await fs.readFile(composePath, \"utf8\");\n            break;\n          } catch {\n          }\n        }\n        try {\n          const envPath = path__default.join(stackDir, \".env\");\n          envContent = await fs.readFile(envPath, \"utf8\");\n        } catch {\n        }\n        const dbInsertValues = {\n          id: stack.id,\n          name: stack.name,\n          dirName: stack.id,\n          // Assuming dirName is stack.id for migration\n          path: stackDir,\n          // Assuming path is STACKS_DIR + stack.id\n          autoUpdate: false,\n          // Default value\n          isExternal: stack.isExternal || false,\n          isLegacy: stack.isLegacy || false,\n          isRemote: stack.isRemote || false,\n          agentId: stack.agentId || null,\n          agentHostname: stack.agentHostname || null,\n          status: stack.status,\n          serviceCount: stack.serviceCount || 0,\n          runningCount: stack.runningCount || 0,\n          composeContent: composeContent || null,\n          envContent: envContent || null,\n          lastPolled: null,\n          // Explicitly null for new migration\n          createdAt: ensureDateObject(stack.createdAt) || /* @__PURE__ */ new Date(),\n          // Convert ISO string to Date\n          updatedAt: ensureDateObject(stack.updatedAt) || /* @__PURE__ */ new Date()\n          // Convert ISO string to Date\n        };\n        await db.insert(stacksTable).values(dbInsertValues);\n        migratedCount++;\n        console.log(`Migrated stack: ${stack.name}`);\n      } catch (error) {\n        const errorMsg = `Failed to migrate stack ${stack.name}: ${error}`;\n        console.error(errorMsg);\n        errors.push(errorMsg);\n      }\n    }\n  } catch (error) {\n    console.error(\"Failed to migrate stacks to database:\", error);\n    return {\n      success: false,\n      migratedCount,\n      errors: [...errors, `Migration failed: ${String(error)}`]\n    };\n  }\n  return { success: errors.length === 0, migratedCount, errors };\n}\nasync function getStackByIdFromDb(id) {\n  try {\n    const result = await db.select().from(stacksTable).where(eq(stacksTable.id, id)).limit(1);\n    if (result.length === 0) return null;\n    const dbStack = result[0];\n    return {\n      id: dbStack.id,\n      name: dbStack.name,\n      serviceCount: dbStack.serviceCount,\n      runningCount: dbStack.runningCount,\n      status: dbStack.status,\n      isExternal: dbStack.isExternal,\n      isLegacy: dbStack.isLegacy,\n      isRemote: dbStack.isRemote,\n      agentId: dbStack.agentId || void 0,\n      agentHostname: dbStack.agentHostname || void 0,\n      createdAt: dbStack.createdAt.toISOString(),\n      // Convert Date to ISO String\n      updatedAt: dbStack.updatedAt.toISOString(),\n      // Convert Date to ISO String\n      lastPolled: dbStack.lastPolled ? dbStack.lastPolled.toISOString() : void 0,\n      // Convert Date to ISO String\n      composeContent: dbStack.composeContent || void 0,\n      envContent: dbStack.envContent || void 0\n    };\n  } catch (error) {\n    console.error(\"Failed to get stack from database:\", error);\n    throw error;\n  }\n}\nasync function listStacksFromDb() {\n  try {\n    const result = await db.select().from(stacksTable);\n    return result.map((dbStack) => ({\n      id: dbStack.id,\n      name: dbStack.name,\n      serviceCount: dbStack.serviceCount,\n      runningCount: dbStack.runningCount,\n      status: dbStack.status,\n      isExternal: dbStack.isExternal,\n      isLegacy: dbStack.isLegacy,\n      isRemote: dbStack.isRemote,\n      agentId: dbStack.agentId || void 0,\n      agentHostname: dbStack.agentHostname || void 0,\n      createdAt: dbStack.createdAt.toISOString(),\n      updatedAt: dbStack.updatedAt.toISOString(),\n      composeContent: dbStack.composeContent || void 0,\n      envContent: dbStack.envContent || void 0,\n      services: []\n    }));\n  } catch (error) {\n    console.error(\"Failed to list stacks from database:\", error);\n    throw error;\n  }\n}\nasync function saveStackToDb(stack) {\n  try {\n    const now = /* @__PURE__ */ new Date();\n    const createdAtForDb = ensureDateObject(stack.createdAt) || now;\n    const lastPolledForDb = ensureDateObject(stack.lastPolled);\n    const dataToSave = {\n      id: stack.id,\n      name: stack.name,\n      dirName: stack.dirName || stack.id,\n      path: stack.path || path__default.join(STACKS_DIR, stack.id),\n      // Ensure path is provided or derived\n      isExternal: typeof stack.isExternal === \"boolean\" ? stack.isExternal : false,\n      isLegacy: typeof stack.isLegacy === \"boolean\" ? stack.isLegacy : false,\n      isRemote: typeof stack.isRemote === \"boolean\" ? stack.isRemote : false,\n      agentId: stack.agentId || null,\n      agentHostname: stack.agentHostname || null,\n      status: stack.status,\n      serviceCount: stack.serviceCount || 0,\n      runningCount: stack.runningCount || 0,\n      composeContent: stack.composeContent || null,\n      envContent: stack.envContent || null,\n      lastPolled: lastPolledForDb\n    };\n    const existing = await db.select({ id: stacksTable.id }).from(stacksTable).where(eq(stacksTable.id, stack.id)).limit(1);\n    if (existing.length > 0) {\n      await db.update(stacksTable).set({\n        ...dataToSave,\n        updatedAt: now\n        // Always update 'updatedAt' on modification\n      }).where(eq(stacksTable.id, stack.id));\n    } else {\n      await db.insert(stacksTable).values({\n        ...dataToSave,\n        createdAt: createdAtForDb,\n        // Set 'createdAt' for new records\n        updatedAt: now\n        // Set 'updatedAt' for new records\n      });\n    }\n    return stack;\n  } catch (error) {\n    console.error(\"Failed to save stack to database:\", error);\n    throw error;\n  }\n}\nasync function updateStackRuntimeInfoInDb(id, updates) {\n  try {\n    const updateData = {\n      updatedAt: /* @__PURE__ */ new Date()\n      // Pass Date object directly\n    };\n    if (updates.status !== void 0) updateData.status = updates.status;\n    if (updates.serviceCount !== void 0) updateData.serviceCount = updates.serviceCount;\n    if (updates.runningCount !== void 0) updateData.runningCount = updates.runningCount;\n    if (updates.lastPolled !== void 0) {\n      updateData.lastPolled = ensureDateObject(updates.lastPolled);\n    }\n    await db.update(stacksTable).set(updateData).where(eq(stacksTable.id, id));\n  } catch (error) {\n    console.error(\"Failed to update stack runtime info in database:\", error);\n    throw error;\n  }\n}\nasync function updateStackContentInDb(id, updates) {\n  try {\n    const updateData = {\n      updatedAt: /* @__PURE__ */ new Date()\n      // Pass Date object\n    };\n    if (updates.composeContent !== void 0) updateData.composeContent = updates.composeContent;\n    if (updates.envContent !== void 0) updateData.envContent = updates.envContent;\n    await db.update(stacksTable).set(updateData).where(eq(stacksTable.id, id));\n  } catch (error) {\n    console.error(\"Failed to update stack content in database:\", error);\n    throw error;\n  }\n}\nasync function deleteStackFromDb(id) {\n  try {\n    await db.delete(stacksTable).where(eq(stacksTable.id, id));\n    return true;\n  } catch (error) {\n    console.error(\"Failed to delete stack from database:\", error);\n    throw error;\n  }\n}\nexport {\n  deleteStackFromDb,\n  getStackByIdFromDb,\n  listStacksFromDb,\n  migrateStacksToDatabase,\n  saveStackToDb,\n  updateStackContentInDb,\n  updateStackRuntimeInfoInDb\n};\n"],"names":[],"mappings":"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"}