{"version":3,"file":"user-service-DRkBleBJ.js","sources":["../../../.svelte-kit/adapter-node/chunks/user-service.js"],"sourcesContent":["import fs from \"node:fs/promises\";\nimport path__default from \"node:path\";\nimport bcrypt from \"bcryptjs\";\nimport { d as decrypt } from \"./encryption-service.js\";\nimport { u as usersTable, U as USER_DIR, e as ensureDirectory } from \"./schema.js\";\nimport { eq } from \"drizzle-orm\";\nimport { d as db } from \"./index4.js\";\nasync function migrateUsersToDatabase(backupOldFiles = true) {\n  const errors = [];\n  let migratedCount = 0;\n  try {\n    console.log(\"Starting user migration from file to database...\");\n    const fileUsers = await listUsersFromFile();\n    console.log(`Found ${fileUsers.length} users in file system`);\n    if (fileUsers.length === 0) {\n      console.log(\"No users found in file system. Migration completed.\");\n      return { success: true, migratedCount: 0, errors: [] };\n    }\n    const existingUsers = await db.select().from(usersTable).limit(1);\n    if (existingUsers.length > 0) {\n      console.log(\"Users already exist in database. Migration aborted.\");\n      return { success: false, migratedCount: 0, errors: [\"Users already exist in database\"] };\n    }\n    for (const user of fileUsers) {\n      try {\n        const insertData = {\n          id: user.id,\n          username: user.username,\n          passwordHash: user.passwordHash || null,\n          displayName: user.displayName || null,\n          email: user.email || null,\n          roles: JSON.stringify(user.roles || []),\n          requirePasswordChange: user.requirePasswordChange || false,\n          oidcSubjectId: user.oidcSubjectId || null,\n          lastLogin: user.lastLogin ? new Date(user.lastLogin) : null,\n          createdAt: new Date(user.createdAt),\n          updatedAt: user.updatedAt ? new Date(user.updatedAt) : /* @__PURE__ */ new Date()\n        };\n        await db.insert(usersTable).values(insertData);\n        migratedCount++;\n        console.log(`Migrated user: ${user.username}`);\n      } catch (error) {\n        const errorMsg = `Failed to migrate user ${user.username}: ${error}`;\n        console.error(errorMsg);\n        errors.push(errorMsg);\n      }\n    }\n    console.log(`Successfully migrated ${migratedCount} users to database`);\n    if (backupOldFiles && migratedCount > 0) {\n      try {\n        const backupDir = path__default.join(USER_DIR, `backup-${Date.now()}`);\n        await fs.mkdir(backupDir, { recursive: true });\n        const files = await fs.readdir(USER_DIR);\n        const userFiles = files.filter((file) => file.endsWith(\".dat\"));\n        for (const file of userFiles) {\n          const sourcePath = path__default.join(USER_DIR, file);\n          const backupPath = path__default.join(backupDir, file);\n          try {\n            await fs.copyFile(sourcePath, backupPath);\n          } catch (copyError) {\n            console.warn(`Could not backup user file ${file}:`, copyError);\n          }\n        }\n        console.log(`User files backed up to: ${backupDir}`);\n      } catch (backupError) {\n        console.warn(\"Could not create backup of user files:\", backupError);\n        errors.push(`Backup failed: ${backupError}`);\n      }\n    }\n    return {\n      success: errors.length === 0,\n      migratedCount,\n      errors\n    };\n  } catch (error) {\n    console.error(\"Failed to migrate users to database:\", error);\n    return {\n      success: false,\n      migratedCount,\n      errors: [...errors, `Migration failed: ${error}`]\n    };\n  }\n}\nasync function getUserByIdFromDb(id) {\n  try {\n    const result = await db.select().from(usersTable).where(eq(usersTable.id, id)).limit(1);\n    if (result.length === 0) {\n      return null;\n    }\n    const dbUser = result[0];\n    return {\n      id: dbUser.id,\n      username: dbUser.username,\n      passwordHash: dbUser.passwordHash || void 0,\n      displayName: dbUser.displayName || void 0,\n      email: dbUser.email || void 0,\n      roles: JSON.parse(dbUser.roles),\n      requirePasswordChange: dbUser.requirePasswordChange,\n      oidcSubjectId: dbUser.oidcSubjectId || void 0,\n      lastLogin: dbUser.lastLogin ? dbUser.lastLogin.toISOString() : void 0,\n      createdAt: dbUser.createdAt.toISOString(),\n      updatedAt: dbUser.updatedAt ? dbUser.updatedAt.toISOString() : void 0\n    };\n  } catch (error) {\n    console.error(\"Failed to get user from database:\", error);\n    throw error;\n  }\n}\nasync function getUserByUsernameFromDb(username) {\n  try {\n    const result = await db.select().from(usersTable).where(eq(usersTable.username, username)).limit(1);\n    if (result.length === 0) {\n      return null;\n    }\n    const dbUser = result[0];\n    return {\n      id: dbUser.id,\n      username: dbUser.username,\n      passwordHash: dbUser.passwordHash || void 0,\n      displayName: dbUser.displayName || void 0,\n      email: dbUser.email || void 0,\n      roles: JSON.parse(dbUser.roles),\n      requirePasswordChange: dbUser.requirePasswordChange,\n      oidcSubjectId: dbUser.oidcSubjectId || void 0,\n      // Fix: Handle Date objects from Drizzle timestamp mode properly\n      lastLogin: dbUser.lastLogin ? dbUser.lastLogin.toISOString() : void 0,\n      createdAt: dbUser.createdAt.toISOString(),\n      updatedAt: dbUser.updatedAt ? dbUser.updatedAt.toISOString() : void 0\n    };\n  } catch (error) {\n    console.error(\"Failed to get user by username from database:\", error);\n    throw error;\n  }\n}\nasync function getUserByOidcSubjectIdFromDb(oidcSubjectId) {\n  try {\n    const result = await db.select().from(usersTable).where(eq(usersTable.oidcSubjectId, oidcSubjectId)).limit(1);\n    if (result.length === 0) {\n      return null;\n    }\n    const dbUser = result[0];\n    return {\n      id: dbUser.id,\n      username: dbUser.username,\n      passwordHash: dbUser.passwordHash || void 0,\n      displayName: dbUser.displayName || void 0,\n      email: dbUser.email || void 0,\n      roles: JSON.parse(dbUser.roles),\n      requirePasswordChange: dbUser.requirePasswordChange,\n      oidcSubjectId: dbUser.oidcSubjectId || void 0,\n      // Fix: Handle Date objects from Drizzle timestamp mode properly\n      lastLogin: dbUser.lastLogin ? dbUser.lastLogin.toISOString() : void 0,\n      createdAt: dbUser.createdAt.toISOString(),\n      updatedAt: dbUser.updatedAt ? dbUser.updatedAt.toISOString() : void 0\n    };\n  } catch (error) {\n    console.error(\"Failed to get user by OIDC subject ID from database:\", error);\n    throw error;\n  }\n}\nasync function listUsersFromDb() {\n  try {\n    const result = await db.select().from(usersTable);\n    return result.map((dbUser) => ({\n      id: dbUser.id,\n      username: dbUser.username,\n      passwordHash: dbUser.passwordHash || void 0,\n      displayName: dbUser.displayName || void 0,\n      email: dbUser.email || void 0,\n      roles: JSON.parse(dbUser.roles),\n      requirePasswordChange: dbUser.requirePasswordChange,\n      oidcSubjectId: dbUser.oidcSubjectId || void 0,\n      // Fix: Handle Date objects from Drizzle timestamp mode properly\n      lastLogin: dbUser.lastLogin ? dbUser.lastLogin.toISOString() : void 0,\n      createdAt: dbUser.createdAt.toISOString(),\n      updatedAt: dbUser.updatedAt ? dbUser.updatedAt.toISOString() : void 0\n    }));\n  } catch (error) {\n    console.error(\"Failed to list users from database:\", error);\n    throw error;\n  }\n}\nasync function saveUserToDb(user) {\n  try {\n    const userData = {\n      id: user.id,\n      username: user.username,\n      passwordHash: user.passwordHash || null,\n      displayName: user.displayName || null,\n      email: user.email || null,\n      roles: JSON.stringify(user.roles || []),\n      requirePasswordChange: user.requirePasswordChange || false,\n      oidcSubjectId: user.oidcSubjectId || null,\n      lastLogin: user.lastLogin ? new Date(user.lastLogin) : null,\n      createdAt: new Date(user.createdAt),\n      updatedAt: /* @__PURE__ */ new Date()\n    };\n    const existing = await db.select().from(usersTable).where(eq(usersTable.id, user.id)).limit(1);\n    if (existing.length > 0) {\n      await db.update(usersTable).set(userData).where(eq(usersTable.id, user.id));\n    } else {\n      await db.insert(usersTable).values(userData);\n    }\n    return user;\n  } catch (error) {\n    console.error(\"Failed to save user to database:\", error);\n    throw error;\n  }\n}\nasync function deleteUserFromDb(id) {\n  try {\n    const result = await db.delete(usersTable).where(eq(usersTable.id, id));\n    return true;\n  } catch (error) {\n    console.error(\"Failed to delete user from database:\", error);\n    throw error;\n  }\n}\nconst userDbService = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  deleteUserFromDb,\n  getUserByIdFromDb,\n  getUserByOidcSubjectIdFromDb,\n  getUserByUsernameFromDb,\n  listUsersFromDb,\n  migrateUsersToDatabase,\n  saveUserToDb\n}, Symbol.toStringTag, { value: \"Module\" }));\nconst getUserById = getUserByIdFromDb;\nconst getUserByUsername = getUserByUsernameFromDb;\nconst getUserByOidcSubjectId = getUserByOidcSubjectIdFromDb;\nconst listUsers = listUsersFromDb;\nconst saveUser = saveUserToDb;\nasync function verifyPassword(user, password) {\n  if (typeof user.passwordHash !== \"string\") {\n    return false;\n  }\n  return await bcrypt.compare(password, user.passwordHash);\n}\nasync function hashPassword(password) {\n  return await bcrypt.hash(password, 14);\n}\nasync function ensureUserDir() {\n  await ensureDirectory(USER_DIR, 448);\n}\nasync function listUsersFromFile() {\n  try {\n    await ensureUserDir();\n    const files = await fs.readdir(USER_DIR);\n    const userFiles = files.filter((file) => file.endsWith(\".dat\"));\n    const users = await Promise.all(\n      userFiles.map(async (file) => {\n        try {\n          const filePath = path__default.join(USER_DIR, file);\n          const encryptedData = await fs.readFile(filePath, \"utf8\");\n          return await decrypt(encryptedData);\n        } catch (error) {\n          console.error(`Error reading user file ${file}:`, error);\n          return null;\n        }\n      })\n    );\n    return users.filter((user) => user !== null);\n  } catch (error) {\n    console.error(\"Error listing users:\", error);\n    return [];\n  }\n}\nexport {\n  getUserById as a,\n  getUserByOidcSubjectId as b,\n  getUserByUsernameFromDb as c,\n  deleteUserFromDb as d,\n  getUserByUsername as g,\n  hashPassword as h,\n  listUsers as l,\n  saveUser as s,\n  userDbService as u,\n  verifyPassword as v\n};\n"],"names":[],"mappings":"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"}